/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * guild_type.proto
 * OpenAPI spec version: version not set
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { customClient } from "../../client";
import type {
	GetUserByIDResponse,
	Status,
	UpdateUserRequest,
	UpdateUserResponse,
} from "../guildTypeProto.schemas";

export const updateUser = (updateUserRequest: UpdateUserRequest) => {
	return customClient<UpdateUserResponse>({
		url: `/api/users/me`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: updateUserRequest,
	});
};

export const getUpdateUserMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateUser>>,
		TError,
		{ data: UpdateUserRequest },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateUser>>,
	TError,
	{ data: UpdateUserRequest },
	TContext
> => {
	const mutationKey = ["updateUser"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateUser>>,
		{ data: UpdateUserRequest }
	> = (props) => {
		const { data } = props ?? {};

		return updateUser(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateUser>>
>;
export type UpdateUserMutationBody = UpdateUserRequest;
export type UpdateUserMutationError = Status;

export const useUpdateUser = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateUser>>,
			TError,
			{ data: UpdateUserRequest },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateUser>>,
	TError,
	{ data: UpdateUserRequest },
	TContext
> => {
	const mutationOptions = getUpdateUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const getUserByID = (id: string, signal?: AbortSignal) => {
	return customClient<GetUserByIDResponse>({
		url: `/api/users/${id}`,
		method: "GET",
		signal,
	});
};

export const getGetUserByIDQueryKey = (id?: string) => {
	return [`/api/users/${id}`] as const;
};

export const getGetUserByIDQueryOptions = <
	TData = Awaited<ReturnType<typeof getUserByID>>,
	TError = Status,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUserByID>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetUserByIDQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByID>>> = ({
		signal,
	}) => getUserByID(id, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getUserByID>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type GetUserByIDQueryResult = NonNullable<
	Awaited<ReturnType<typeof getUserByID>>
>;
export type GetUserByIDQueryError = Status;

export function useGetUserByID<
	TData = Awaited<ReturnType<typeof getUserByID>>,
	TError = Status,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUserByID>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUserByID>>,
					TError,
					Awaited<ReturnType<typeof getUserByID>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useGetUserByID<
	TData = Awaited<ReturnType<typeof getUserByID>>,
	TError = Status,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUserByID>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUserByID>>,
					TError,
					Awaited<ReturnType<typeof getUserByID>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUserByID<
	TData = Awaited<ReturnType<typeof getUserByID>>,
	TError = Status,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUserByID>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetUserByID<
	TData = Awaited<ReturnType<typeof getUserByID>>,
	TError = Status,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUserByID>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getGetUserByIDQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
