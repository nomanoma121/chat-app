/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * guild_type.proto
 * OpenAPI spec version: version not set
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { customClient } from "../../client";
import type {
	CreateGuildRequest,
	CreateGuildResponse,
	GetGuildByIDResponse,
	GetGuildOverviewResponse,
	ListMyGuildsResponse,
	Status,
	UpdateGuildBody,
	UpdateGuildResponse,
} from "../guildTypeProto.schemas";

export const createGuild = (
	createGuildRequest: CreateGuildRequest,
	signal?: AbortSignal,
) => {
	return customClient<CreateGuildResponse>({
		url: `/api/guilds`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createGuildRequest,
		signal,
	});
};

export const getCreateGuildMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createGuild>>,
		TError,
		{ data: CreateGuildRequest },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createGuild>>,
	TError,
	{ data: CreateGuildRequest },
	TContext
> => {
	const mutationKey = ["createGuild"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createGuild>>,
		{ data: CreateGuildRequest }
	> = (props) => {
		const { data } = props ?? {};

		return createGuild(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateGuildMutationResult = NonNullable<
	Awaited<ReturnType<typeof createGuild>>
>;
export type CreateGuildMutationBody = CreateGuildRequest;
export type CreateGuildMutationError = Status;

export const useCreateGuild = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createGuild>>,
			TError,
			{ data: CreateGuildRequest },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createGuild>>,
	TError,
	{ data: CreateGuildRequest },
	TContext
> => {
	const mutationOptions = getCreateGuildMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const getGuildByID = (guildId: string, signal?: AbortSignal) => {
	return customClient<GetGuildByIDResponse>({
		url: `/api/guilds/${guildId}`,
		method: "GET",
		signal,
	});
};

export const getGetGuildByIDQueryKey = (guildId?: string) => {
	return [`/api/guilds/${guildId}`] as const;
};

export const getGetGuildByIDQueryOptions = <
	TData = Awaited<ReturnType<typeof getGuildByID>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getGuildByID>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetGuildByIDQueryKey(guildId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildByID>>> = ({
		signal,
	}) => getGuildByID(guildId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!guildId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getGuildByID>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type GetGuildByIDQueryResult = NonNullable<
	Awaited<ReturnType<typeof getGuildByID>>
>;
export type GetGuildByIDQueryError = Status;

export function useGetGuildByID<
	TData = Awaited<ReturnType<typeof getGuildByID>>,
	TError = Status,
>(
	guildId: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getGuildByID>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getGuildByID>>,
					TError,
					Awaited<ReturnType<typeof getGuildByID>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useGetGuildByID<
	TData = Awaited<ReturnType<typeof getGuildByID>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getGuildByID>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getGuildByID>>,
					TError,
					Awaited<ReturnType<typeof getGuildByID>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetGuildByID<
	TData = Awaited<ReturnType<typeof getGuildByID>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getGuildByID>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetGuildByID<
	TData = Awaited<ReturnType<typeof getGuildByID>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getGuildByID>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getGetGuildByIDQueryOptions(guildId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const updateGuild = (
	guildId: string,
	updateGuildBody: UpdateGuildBody,
) => {
	return customClient<UpdateGuildResponse>({
		url: `/api/guilds/${guildId}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: updateGuildBody,
	});
};

export const getUpdateGuildMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateGuild>>,
		TError,
		{ guildId: string; data: UpdateGuildBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateGuild>>,
	TError,
	{ guildId: string; data: UpdateGuildBody },
	TContext
> => {
	const mutationKey = ["updateGuild"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateGuild>>,
		{ guildId: string; data: UpdateGuildBody }
	> = (props) => {
		const { guildId, data } = props ?? {};

		return updateGuild(guildId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateGuildMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateGuild>>
>;
export type UpdateGuildMutationBody = UpdateGuildBody;
export type UpdateGuildMutationError = Status;

export const useUpdateGuild = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateGuild>>,
			TError,
			{ guildId: string; data: UpdateGuildBody },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateGuild>>,
	TError,
	{ guildId: string; data: UpdateGuildBody },
	TContext
> => {
	const mutationOptions = getUpdateGuildMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const getGuildOverview = (guildId: string, signal?: AbortSignal) => {
	return customClient<GetGuildOverviewResponse>({
		url: `/api/guilds/${guildId}/overview`,
		method: "GET",
		signal,
	});
};

export const getGetGuildOverviewQueryKey = (guildId?: string) => {
	return [`/api/guilds/${guildId}/overview`] as const;
};

export const getGetGuildOverviewQueryOptions = <
	TData = Awaited<ReturnType<typeof getGuildOverview>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildOverview>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetGuildOverviewQueryKey(guildId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getGuildOverview>>
	> = ({ signal }) => getGuildOverview(guildId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!guildId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getGuildOverview>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type GetGuildOverviewQueryResult = NonNullable<
	Awaited<ReturnType<typeof getGuildOverview>>
>;
export type GetGuildOverviewQueryError = Status;

export function useGetGuildOverview<
	TData = Awaited<ReturnType<typeof getGuildOverview>>,
	TError = Status,
>(
	guildId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildOverview>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getGuildOverview>>,
					TError,
					Awaited<ReturnType<typeof getGuildOverview>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useGetGuildOverview<
	TData = Awaited<ReturnType<typeof getGuildOverview>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildOverview>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getGuildOverview>>,
					TError,
					Awaited<ReturnType<typeof getGuildOverview>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetGuildOverview<
	TData = Awaited<ReturnType<typeof getGuildOverview>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildOverview>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetGuildOverview<
	TData = Awaited<ReturnType<typeof getGuildOverview>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildOverview>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getGetGuildOverviewQueryOptions(guildId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const listMyGuilds = (signal?: AbortSignal) => {
	return customClient<ListMyGuildsResponse>({
		url: `/api/users/me/guilds`,
		method: "GET",
		signal,
	});
};

export const getListMyGuildsQueryKey = () => {
	return [`/api/users/me/guilds`] as const;
};

export const getListMyGuildsQueryOptions = <
	TData = Awaited<ReturnType<typeof listMyGuilds>>,
	TError = Status,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof listMyGuilds>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListMyGuildsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listMyGuilds>>> = ({
		signal,
	}) => listMyGuilds(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listMyGuilds>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type ListMyGuildsQueryResult = NonNullable<
	Awaited<ReturnType<typeof listMyGuilds>>
>;
export type ListMyGuildsQueryError = Status;

export function useListMyGuilds<
	TData = Awaited<ReturnType<typeof listMyGuilds>>,
	TError = Status,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listMyGuilds>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listMyGuilds>>,
					TError,
					Awaited<ReturnType<typeof listMyGuilds>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useListMyGuilds<
	TData = Awaited<ReturnType<typeof listMyGuilds>>,
	TError = Status,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listMyGuilds>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listMyGuilds>>,
					TError,
					Awaited<ReturnType<typeof listMyGuilds>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useListMyGuilds<
	TData = Awaited<ReturnType<typeof listMyGuilds>>,
	TError = Status,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listMyGuilds>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useListMyGuilds<
	TData = Awaited<ReturnType<typeof listMyGuilds>>,
	TError = Status,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listMyGuilds>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getListMyGuildsQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
