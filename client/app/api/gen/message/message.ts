/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * guild_type.proto
 * OpenAPI spec version: version not set
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { customClient } from "../../client";
import type {
	CreateMessageBody,
	CreateMessageResponse,
	DeleteMessageByMessageIDResponse,
	GetMessagesByChannelIDResponse,
	Status,
	UpdateMessageByMessageIDBody,
	UpdateMessageByMessageIDResponse,
} from "../guildTypeProto.schemas";

export const getMessagesByChannelID = (
	channelId: string,
	signal?: AbortSignal,
) => {
	return customClient<GetMessagesByChannelIDResponse>({
		url: `/api/channels/${channelId}/messages`,
		method: "GET",
		signal,
	});
};

export const getGetMessagesByChannelIDQueryKey = (channelId?: string) => {
	return [`/api/channels/${channelId}/messages`] as const;
};

export const getGetMessagesByChannelIDQueryOptions = <
	TData = Awaited<ReturnType<typeof getMessagesByChannelID>>,
	TError = Status,
>(
	channelId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getMessagesByChannelID>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetMessagesByChannelIDQueryKey(channelId);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getMessagesByChannelID>>
	> = ({ signal }) => getMessagesByChannelID(channelId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!channelId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getMessagesByChannelID>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMessagesByChannelIDQueryResult = NonNullable<
	Awaited<ReturnType<typeof getMessagesByChannelID>>
>;
export type GetMessagesByChannelIDQueryError = Status;

export function useGetMessagesByChannelID<
	TData = Awaited<ReturnType<typeof getMessagesByChannelID>>,
	TError = Status,
>(
	channelId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getMessagesByChannelID>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getMessagesByChannelID>>,
					TError,
					Awaited<ReturnType<typeof getMessagesByChannelID>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useGetMessagesByChannelID<
	TData = Awaited<ReturnType<typeof getMessagesByChannelID>>,
	TError = Status,
>(
	channelId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getMessagesByChannelID>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getMessagesByChannelID>>,
					TError,
					Awaited<ReturnType<typeof getMessagesByChannelID>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMessagesByChannelID<
	TData = Awaited<ReturnType<typeof getMessagesByChannelID>>,
	TError = Status,
>(
	channelId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getMessagesByChannelID>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetMessagesByChannelID<
	TData = Awaited<ReturnType<typeof getMessagesByChannelID>>,
	TError = Status,
>(
	channelId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getMessagesByChannelID>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getGetMessagesByChannelIDQueryOptions(
		channelId,
		options,
	);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const createMessage = (
	channelId: string,
	createMessageBody: CreateMessageBody,
	signal?: AbortSignal,
) => {
	return customClient<CreateMessageResponse>({
		url: `/api/channels/${channelId}/messages`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createMessageBody,
		signal,
	});
};

export const getCreateMessageMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createMessage>>,
		TError,
		{ channelId: string; data: CreateMessageBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createMessage>>,
	TError,
	{ channelId: string; data: CreateMessageBody },
	TContext
> => {
	const mutationKey = ["createMessage"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createMessage>>,
		{ channelId: string; data: CreateMessageBody }
	> = (props) => {
		const { channelId, data } = props ?? {};

		return createMessage(channelId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateMessageMutationResult = NonNullable<
	Awaited<ReturnType<typeof createMessage>>
>;
export type CreateMessageMutationBody = CreateMessageBody;
export type CreateMessageMutationError = Status;

export const useCreateMessage = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createMessage>>,
			TError,
			{ channelId: string; data: CreateMessageBody },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createMessage>>,
	TError,
	{ channelId: string; data: CreateMessageBody },
	TContext
> => {
	const mutationOptions = getCreateMessageMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const deleteMessageByMessageID = (messageId: string) => {
	return customClient<DeleteMessageByMessageIDResponse>({
		url: `/api/messages/${messageId}`,
		method: "DELETE",
	});
};

export const getDeleteMessageByMessageIDMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteMessageByMessageID>>,
		TError,
		{ messageId: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteMessageByMessageID>>,
	TError,
	{ messageId: string },
	TContext
> => {
	const mutationKey = ["deleteMessageByMessageID"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteMessageByMessageID>>,
		{ messageId: string }
	> = (props) => {
		const { messageId } = props ?? {};

		return deleteMessageByMessageID(messageId);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteMessageByMessageIDMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteMessageByMessageID>>
>;

export type DeleteMessageByMessageIDMutationError = Status;

export const useDeleteMessageByMessageID = <
	TError = Status,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteMessageByMessageID>>,
			TError,
			{ messageId: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteMessageByMessageID>>,
	TError,
	{ messageId: string },
	TContext
> => {
	const mutationOptions = getDeleteMessageByMessageIDMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const updateMessageByMessageID = (
	messageId: string,
	updateMessageByMessageIDBody: UpdateMessageByMessageIDBody,
) => {
	return customClient<UpdateMessageByMessageIDResponse>({
		url: `/api/messages/${messageId}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: updateMessageByMessageIDBody,
	});
};

export const getUpdateMessageByMessageIDMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateMessageByMessageID>>,
		TError,
		{ messageId: string; data: UpdateMessageByMessageIDBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateMessageByMessageID>>,
	TError,
	{ messageId: string; data: UpdateMessageByMessageIDBody },
	TContext
> => {
	const mutationKey = ["updateMessageByMessageID"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateMessageByMessageID>>,
		{ messageId: string; data: UpdateMessageByMessageIDBody }
	> = (props) => {
		const { messageId, data } = props ?? {};

		return updateMessageByMessageID(messageId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateMessageByMessageIDMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateMessageByMessageID>>
>;
export type UpdateMessageByMessageIDMutationBody = UpdateMessageByMessageIDBody;
export type UpdateMessageByMessageIDMutationError = Status;

export const useUpdateMessageByMessageID = <
	TError = Status,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateMessageByMessageID>>,
			TError,
			{ messageId: string; data: UpdateMessageByMessageIDBody },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateMessageByMessageID>>,
	TError,
	{ messageId: string; data: UpdateMessageByMessageIDBody },
	TContext
> => {
	const mutationOptions = getUpdateMessageByMessageIDMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
