/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * guild_type.proto
 * OpenAPI spec version: version not set
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";

import type {
	CreateBody,
	CreateResponse,
	DeleteByMessageIDResponse,
	GetByChannelIDResponse,
	Status,
	UpdateByMessageIDBody,
	UpdateByMessageIDResponse,
} from "../guildTypeProto.schemas";

import { customClient } from "../../client";

export const getByChannelID = (channelId: string, signal?: AbortSignal) => {
	return customClient<GetByChannelIDResponse>({
		url: `/api/channels/${channelId}/messages`,
		method: "GET",
		signal,
	});
};

export const getGetByChannelIDQueryKey = (channelId?: string) => {
	return [`/api/channels/${channelId}/messages`] as const;
};

export const getGetByChannelIDQueryOptions = <
	TData = Awaited<ReturnType<typeof getByChannelID>>,
	TError = Status,
>(
	channelId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getByChannelID>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetByChannelIDQueryKey(channelId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getByChannelID>>> = ({
		signal,
	}) => getByChannelID(channelId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!channelId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getByChannelID>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type GetByChannelIDQueryResult = NonNullable<
	Awaited<ReturnType<typeof getByChannelID>>
>;
export type GetByChannelIDQueryError = Status;

export function useGetByChannelID<
	TData = Awaited<ReturnType<typeof getByChannelID>>,
	TError = Status,
>(
	channelId: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getByChannelID>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getByChannelID>>,
					TError,
					Awaited<ReturnType<typeof getByChannelID>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useGetByChannelID<
	TData = Awaited<ReturnType<typeof getByChannelID>>,
	TError = Status,
>(
	channelId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getByChannelID>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getByChannelID>>,
					TError,
					Awaited<ReturnType<typeof getByChannelID>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetByChannelID<
	TData = Awaited<ReturnType<typeof getByChannelID>>,
	TError = Status,
>(
	channelId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getByChannelID>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetByChannelID<
	TData = Awaited<ReturnType<typeof getByChannelID>>,
	TError = Status,
>(
	channelId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getByChannelID>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getGetByChannelIDQueryOptions(channelId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const create = (
	channelId: string,
	createBody: CreateBody,
	signal?: AbortSignal,
) => {
	return customClient<CreateResponse>({
		url: `/api/channels/${channelId}/messages`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createBody,
		signal,
	});
};

export const getCreateMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof create>>,
		TError,
		{ channelId: string; data: CreateBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof create>>,
	TError,
	{ channelId: string; data: CreateBody },
	TContext
> => {
	const mutationKey = ["create"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof create>>,
		{ channelId: string; data: CreateBody }
	> = (props) => {
		const { channelId, data } = props ?? {};

		return create(channelId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof create>>
>;
export type CreateMutationBody = CreateBody;
export type CreateMutationError = Status;

export const useCreate = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof create>>,
			TError,
			{ channelId: string; data: CreateBody },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof create>>,
	TError,
	{ channelId: string; data: CreateBody },
	TContext
> => {
	const mutationOptions = getCreateMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const deleteByMessageID = (messageId: string) => {
	return customClient<DeleteByMessageIDResponse>({
		url: `/api/messages/${messageId}`,
		method: "DELETE",
	});
};

export const getDeleteByMessageIDMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteByMessageID>>,
		TError,
		{ messageId: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteByMessageID>>,
	TError,
	{ messageId: string },
	TContext
> => {
	const mutationKey = ["deleteByMessageID"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteByMessageID>>,
		{ messageId: string }
	> = (props) => {
		const { messageId } = props ?? {};

		return deleteByMessageID(messageId);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteByMessageIDMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteByMessageID>>
>;

export type DeleteByMessageIDMutationError = Status;

export const useDeleteByMessageID = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteByMessageID>>,
			TError,
			{ messageId: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteByMessageID>>,
	TError,
	{ messageId: string },
	TContext
> => {
	const mutationOptions = getDeleteByMessageIDMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const updateByMessageID = (
	messageId: string,
	updateByMessageIDBody: UpdateByMessageIDBody,
) => {
	return customClient<UpdateByMessageIDResponse>({
		url: `/api/messages/${messageId}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: updateByMessageIDBody,
	});
};

export const getUpdateByMessageIDMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateByMessageID>>,
		TError,
		{ messageId: string; data: UpdateByMessageIDBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateByMessageID>>,
	TError,
	{ messageId: string; data: UpdateByMessageIDBody },
	TContext
> => {
	const mutationKey = ["updateByMessageID"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateByMessageID>>,
		{ messageId: string; data: UpdateByMessageIDBody }
	> = (props) => {
		const { messageId, data } = props ?? {};

		return updateByMessageID(messageId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateByMessageIDMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateByMessageID>>
>;
export type UpdateByMessageIDMutationBody = UpdateByMessageIDBody;
export type UpdateByMessageIDMutationError = Status;

export const useUpdateByMessageID = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateByMessageID>>,
			TError,
			{ messageId: string; data: UpdateByMessageIDBody },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateByMessageID>>,
	TError,
	{ messageId: string; data: UpdateByMessageIDBody },
	TContext
> => {
	const mutationOptions = getUpdateByMessageIDMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
