/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * guild_type.proto
 * OpenAPI spec version: version not set
 */

import type {
	MutationFunction,
	QueryClient,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";
import { customClient } from "../../client";
import type {
	CreateChannelBody,
	CreateChannelResponse,
	DeleteChannelResponse,
	Status,
	UpdateChannelBody,
	UpdateChannelResponse,
} from "../guildTypeProto.schemas";

export const createChannel = (
	categoryId: string,
	createChannelBody: CreateChannelBody,
	signal?: AbortSignal,
) => {
	return customClient<CreateChannelResponse>({
		url: `/api/categories/${categoryId}/channels`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createChannelBody,
		signal,
	});
};

export const getCreateChannelMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createChannel>>,
		TError,
		{ categoryId: string; data: CreateChannelBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createChannel>>,
	TError,
	{ categoryId: string; data: CreateChannelBody },
	TContext
> => {
	const mutationKey = ["createChannel"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createChannel>>,
		{ categoryId: string; data: CreateChannelBody }
	> = (props) => {
		const { categoryId, data } = props ?? {};

		return createChannel(categoryId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateChannelMutationResult = NonNullable<
	Awaited<ReturnType<typeof createChannel>>
>;
export type CreateChannelMutationBody = CreateChannelBody;
export type CreateChannelMutationError = Status;

export const useCreateChannel = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createChannel>>,
			TError,
			{ categoryId: string; data: CreateChannelBody },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createChannel>>,
	TError,
	{ categoryId: string; data: CreateChannelBody },
	TContext
> => {
	const mutationOptions = getCreateChannelMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const deleteChannel = (channelId: string) => {
	return customClient<DeleteChannelResponse>({
		url: `/api/channels/${channelId}`,
		method: "DELETE",
	});
};

export const getDeleteChannelMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteChannel>>,
		TError,
		{ channelId: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteChannel>>,
	TError,
	{ channelId: string },
	TContext
> => {
	const mutationKey = ["deleteChannel"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteChannel>>,
		{ channelId: string }
	> = (props) => {
		const { channelId } = props ?? {};

		return deleteChannel(channelId);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteChannelMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteChannel>>
>;

export type DeleteChannelMutationError = Status;

export const useDeleteChannel = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteChannel>>,
			TError,
			{ channelId: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteChannel>>,
	TError,
	{ channelId: string },
	TContext
> => {
	const mutationOptions = getDeleteChannelMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const updateChannel = (
	channelId: string,
	updateChannelBody: UpdateChannelBody,
) => {
	return customClient<UpdateChannelResponse>({
		url: `/api/channels/${channelId}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: updateChannelBody,
	});
};

export const getUpdateChannelMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateChannel>>,
		TError,
		{ channelId: string; data: UpdateChannelBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateChannel>>,
	TError,
	{ channelId: string; data: UpdateChannelBody },
	TContext
> => {
	const mutationKey = ["updateChannel"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateChannel>>,
		{ channelId: string; data: UpdateChannelBody }
	> = (props) => {
		const { channelId, data } = props ?? {};

		return updateChannel(channelId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateChannelMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateChannel>>
>;
export type UpdateChannelMutationBody = UpdateChannelBody;
export type UpdateChannelMutationError = Status;

export const useUpdateChannel = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateChannel>>,
			TError,
			{ channelId: string; data: UpdateChannelBody },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateChannel>>,
	TError,
	{ channelId: string; data: UpdateChannelBody },
	TContext
> => {
	const mutationOptions = getUpdateChannelMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
