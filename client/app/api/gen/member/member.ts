/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * guild_type.proto
 * OpenAPI spec version: version not set
 */

import type {
	MutationFunction,
	QueryClient,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";
import { customClient } from "../../client";
import type {
	DeleteGuildMemberResponse,
	LeaveGuildResponse,
	Status,
} from "../guildTypeProto.schemas";

export const leaveGuild = (guildId: string) => {
	return customClient<LeaveGuildResponse>({
		url: `/api/guilds/${guildId}/members/me`,
		method: "DELETE",
	});
};

export const getLeaveGuildMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof leaveGuild>>,
		TError,
		{ guildId: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof leaveGuild>>,
	TError,
	{ guildId: string },
	TContext
> => {
	const mutationKey = ["leaveGuild"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof leaveGuild>>,
		{ guildId: string }
	> = (props) => {
		const { guildId } = props ?? {};

		return leaveGuild(guildId);
	};

	return { mutationFn, ...mutationOptions };
};

export type LeaveGuildMutationResult = NonNullable<
	Awaited<ReturnType<typeof leaveGuild>>
>;

export type LeaveGuildMutationError = Status;

export const useLeaveGuild = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof leaveGuild>>,
			TError,
			{ guildId: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof leaveGuild>>,
	TError,
	{ guildId: string },
	TContext
> => {
	const mutationOptions = getLeaveGuildMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const deleteGuildMember = (guildId: string, userId: string) => {
	return customClient<DeleteGuildMemberResponse>({
		url: `/api/guilds/${guildId}/members/${userId}`,
		method: "DELETE",
	});
};

export const getDeleteGuildMemberMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteGuildMember>>,
		TError,
		{ guildId: string; userId: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteGuildMember>>,
	TError,
	{ guildId: string; userId: string },
	TContext
> => {
	const mutationKey = ["deleteGuildMember"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteGuildMember>>,
		{ guildId: string; userId: string }
	> = (props) => {
		const { guildId, userId } = props ?? {};

		return deleteGuildMember(guildId, userId);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteGuildMemberMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteGuildMember>>
>;

export type DeleteGuildMemberMutationError = Status;

export const useDeleteGuildMember = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteGuildMember>>,
			TError,
			{ guildId: string; userId: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteGuildMember>>,
	TError,
	{ guildId: string; userId: string },
	TContext
> => {
	const mutationOptions = getDeleteGuildMemberMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
