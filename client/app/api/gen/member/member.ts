/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * guild_type.proto
 * OpenAPI spec version: version not set
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { customClient } from "../../client";
import type {
	DeleteGuildMemberResponse,
	GetGuildMembersResponse,
	LeaveGuildResponse,
	Status,
} from "../guildTypeProto.schemas";

export const getGuildMembers = (guildId: string, signal?: AbortSignal) => {
	return customClient<GetGuildMembersResponse>({
		url: `/api/guilds/${guildId}/members`,
		method: "GET",
		signal,
	});
};

export const getGetGuildMembersQueryKey = (guildId?: string) => {
	return [`/api/guilds/${guildId}/members`] as const;
};

export const getGetGuildMembersQueryOptions = <
	TData = Awaited<ReturnType<typeof getGuildMembers>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildMembers>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetGuildMembersQueryKey(guildId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildMembers>>> = ({
		signal,
	}) => getGuildMembers(guildId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!guildId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getGuildMembers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type GetGuildMembersQueryResult = NonNullable<
	Awaited<ReturnType<typeof getGuildMembers>>
>;
export type GetGuildMembersQueryError = Status;

export function useGetGuildMembers<
	TData = Awaited<ReturnType<typeof getGuildMembers>>,
	TError = Status,
>(
	guildId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildMembers>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getGuildMembers>>,
					TError,
					Awaited<ReturnType<typeof getGuildMembers>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useGetGuildMembers<
	TData = Awaited<ReturnType<typeof getGuildMembers>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildMembers>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getGuildMembers>>,
					TError,
					Awaited<ReturnType<typeof getGuildMembers>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetGuildMembers<
	TData = Awaited<ReturnType<typeof getGuildMembers>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildMembers>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetGuildMembers<
	TData = Awaited<ReturnType<typeof getGuildMembers>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildMembers>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getGetGuildMembersQueryOptions(guildId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const leaveGuild = (guildId: string) => {
	return customClient<LeaveGuildResponse>({
		url: `/api/guilds/${guildId}/members/me`,
		method: "DELETE",
	});
};

export const getLeaveGuildMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof leaveGuild>>,
		TError,
		{ guildId: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof leaveGuild>>,
	TError,
	{ guildId: string },
	TContext
> => {
	const mutationKey = ["leaveGuild"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof leaveGuild>>,
		{ guildId: string }
	> = (props) => {
		const { guildId } = props ?? {};

		return leaveGuild(guildId);
	};

	return { mutationFn, ...mutationOptions };
};

export type LeaveGuildMutationResult = NonNullable<
	Awaited<ReturnType<typeof leaveGuild>>
>;

export type LeaveGuildMutationError = Status;

export const useLeaveGuild = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof leaveGuild>>,
			TError,
			{ guildId: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof leaveGuild>>,
	TError,
	{ guildId: string },
	TContext
> => {
	const mutationOptions = getLeaveGuildMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const deleteGuildMember = (guildId: string, userId: string) => {
	return customClient<DeleteGuildMemberResponse>({
		url: `/api/guilds/${guildId}/members/${userId}`,
		method: "DELETE",
	});
};

export const getDeleteGuildMemberMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteGuildMember>>,
		TError,
		{ guildId: string; userId: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteGuildMember>>,
	TError,
	{ guildId: string; userId: string },
	TContext
> => {
	const mutationKey = ["deleteGuildMember"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteGuildMember>>,
		{ guildId: string; userId: string }
	> = (props) => {
		const { guildId, userId } = props ?? {};

		return deleteGuildMember(guildId, userId);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteGuildMemberMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteGuildMember>>
>;

export type DeleteGuildMemberMutationError = Status;

export const useDeleteGuildMember = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteGuildMember>>,
			TError,
			{ guildId: string; userId: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteGuildMember>>,
	TError,
	{ guildId: string; userId: string },
	TContext
> => {
	const mutationOptions = getDeleteGuildMemberMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
