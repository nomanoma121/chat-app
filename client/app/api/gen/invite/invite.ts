/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * guild_type.proto
 * OpenAPI spec version: version not set
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { customClient } from "../../client";
import type {
	CreateGuildInviteBody,
	CreateGuildInviteResponse,
	DeleteGuildInviteResponse,
	GetGuildByInviteCodeResponse,
	GetGuildInvitesResponse,
	JoinGuildBody,
	JoinGuildResponse,
	Status,
} from "../guildTypeProto.schemas";

export const getGuildInvites = (guildId: string, signal?: AbortSignal) => {
	return customClient<GetGuildInvitesResponse>({
		url: `/api/guilds/${guildId}/invites`,
		method: "GET",
		signal,
	});
};

export const getGetGuildInvitesQueryKey = (guildId?: string) => {
	return [`/api/guilds/${guildId}/invites`] as const;
};

export const getGetGuildInvitesQueryOptions = <
	TData = Awaited<ReturnType<typeof getGuildInvites>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildInvites>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetGuildInvitesQueryKey(guildId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildInvites>>> = ({
		signal,
	}) => getGuildInvites(guildId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!guildId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getGuildInvites>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type GetGuildInvitesQueryResult = NonNullable<
	Awaited<ReturnType<typeof getGuildInvites>>
>;
export type GetGuildInvitesQueryError = Status;

export function useGetGuildInvites<
	TData = Awaited<ReturnType<typeof getGuildInvites>>,
	TError = Status,
>(
	guildId: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildInvites>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getGuildInvites>>,
					TError,
					Awaited<ReturnType<typeof getGuildInvites>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useGetGuildInvites<
	TData = Awaited<ReturnType<typeof getGuildInvites>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildInvites>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getGuildInvites>>,
					TError,
					Awaited<ReturnType<typeof getGuildInvites>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetGuildInvites<
	TData = Awaited<ReturnType<typeof getGuildInvites>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildInvites>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetGuildInvites<
	TData = Awaited<ReturnType<typeof getGuildInvites>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildInvites>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getGetGuildInvitesQueryOptions(guildId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const createGuildInvite = (
	guildId: string,
	createGuildInviteBody: CreateGuildInviteBody,
	signal?: AbortSignal,
) => {
	return customClient<CreateGuildInviteResponse>({
		url: `/api/guilds/${guildId}/invites`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createGuildInviteBody,
		signal,
	});
};

export const getCreateGuildInviteMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createGuildInvite>>,
		TError,
		{ guildId: string; data: CreateGuildInviteBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createGuildInvite>>,
	TError,
	{ guildId: string; data: CreateGuildInviteBody },
	TContext
> => {
	const mutationKey = ["createGuildInvite"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createGuildInvite>>,
		{ guildId: string; data: CreateGuildInviteBody }
	> = (props) => {
		const { guildId, data } = props ?? {};

		return createGuildInvite(guildId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateGuildInviteMutationResult = NonNullable<
	Awaited<ReturnType<typeof createGuildInvite>>
>;
export type CreateGuildInviteMutationBody = CreateGuildInviteBody;
export type CreateGuildInviteMutationError = Status;

export const useCreateGuildInvite = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createGuildInvite>>,
			TError,
			{ guildId: string; data: CreateGuildInviteBody },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createGuildInvite>>,
	TError,
	{ guildId: string; data: CreateGuildInviteBody },
	TContext
> => {
	const mutationOptions = getCreateGuildInviteMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const getGuildByInviteCode = (
	inviteCode: string,
	signal?: AbortSignal,
) => {
	return customClient<GetGuildByInviteCodeResponse>({
		url: `/api/invites/${inviteCode}`,
		method: "GET",
		signal,
	});
};

export const getGetGuildByInviteCodeQueryKey = (inviteCode?: string) => {
	return [`/api/invites/${inviteCode}`] as const;
};

export const getGetGuildByInviteCodeQueryOptions = <
	TData = Awaited<ReturnType<typeof getGuildByInviteCode>>,
	TError = Status,
>(
	inviteCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildByInviteCode>>,
				TError,
				TData
			>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetGuildByInviteCodeQueryKey(inviteCode);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getGuildByInviteCode>>
	> = ({ signal }) => getGuildByInviteCode(inviteCode, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!inviteCode,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getGuildByInviteCode>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type GetGuildByInviteCodeQueryResult = NonNullable<
	Awaited<ReturnType<typeof getGuildByInviteCode>>
>;
export type GetGuildByInviteCodeQueryError = Status;

export function useGetGuildByInviteCode<
	TData = Awaited<ReturnType<typeof getGuildByInviteCode>>,
	TError = Status,
>(
	inviteCode: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildByInviteCode>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getGuildByInviteCode>>,
					TError,
					Awaited<ReturnType<typeof getGuildByInviteCode>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useGetGuildByInviteCode<
	TData = Awaited<ReturnType<typeof getGuildByInviteCode>>,
	TError = Status,
>(
	inviteCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildByInviteCode>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getGuildByInviteCode>>,
					TError,
					Awaited<ReturnType<typeof getGuildByInviteCode>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetGuildByInviteCode<
	TData = Awaited<ReturnType<typeof getGuildByInviteCode>>,
	TError = Status,
>(
	inviteCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildByInviteCode>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetGuildByInviteCode<
	TData = Awaited<ReturnType<typeof getGuildByInviteCode>>,
	TError = Status,
>(
	inviteCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getGuildByInviteCode>>,
				TError,
				TData
			>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getGetGuildByInviteCodeQueryOptions(inviteCode, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const deleteGuildInvite = (inviteCode: string) => {
	return customClient<DeleteGuildInviteResponse>({
		url: `/api/invites/${inviteCode}`,
		method: "DELETE",
	});
};

export const getDeleteGuildInviteMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteGuildInvite>>,
		TError,
		{ inviteCode: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteGuildInvite>>,
	TError,
	{ inviteCode: string },
	TContext
> => {
	const mutationKey = ["deleteGuildInvite"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteGuildInvite>>,
		{ inviteCode: string }
	> = (props) => {
		const { inviteCode } = props ?? {};

		return deleteGuildInvite(inviteCode);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteGuildInviteMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteGuildInvite>>
>;

export type DeleteGuildInviteMutationError = Status;

export const useDeleteGuildInvite = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteGuildInvite>>,
			TError,
			{ inviteCode: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteGuildInvite>>,
	TError,
	{ inviteCode: string },
	TContext
> => {
	const mutationOptions = getDeleteGuildInviteMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const joinGuild = (
	inviteCode: string,
	joinGuildBody: JoinGuildBody,
	signal?: AbortSignal,
) => {
	return customClient<JoinGuildResponse>({
		url: `/api/invites/${inviteCode}/join`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: joinGuildBody,
		signal,
	});
};

export const getJoinGuildMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof joinGuild>>,
		TError,
		{ inviteCode: string; data: JoinGuildBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof joinGuild>>,
	TError,
	{ inviteCode: string; data: JoinGuildBody },
	TContext
> => {
	const mutationKey = ["joinGuild"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof joinGuild>>,
		{ inviteCode: string; data: JoinGuildBody }
	> = (props) => {
		const { inviteCode, data } = props ?? {};

		return joinGuild(inviteCode, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type JoinGuildMutationResult = NonNullable<
	Awaited<ReturnType<typeof joinGuild>>
>;
export type JoinGuildMutationBody = JoinGuildBody;
export type JoinGuildMutationError = Status;

export const useJoinGuild = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof joinGuild>>,
			TError,
			{ inviteCode: string; data: JoinGuildBody },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof joinGuild>>,
	TError,
	{ inviteCode: string; data: JoinGuildBody },
	TContext
> => {
	const mutationOptions = getJoinGuildMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
