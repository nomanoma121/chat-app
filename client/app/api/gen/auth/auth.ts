/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * guild_type.proto
 * OpenAPI spec version: version not set
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { customClient } from "../../client";
import type {
	AuthMeResponse,
	LoginRequest,
	LoginResponse,
	RegisterRequest,
	RegisterResponse,
	Status,
} from "../guildTypeProto.schemas";

export const login = (loginRequest: LoginRequest, signal?: AbortSignal) => {
	return customClient<LoginResponse>({
		url: `/api/auth/login`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: loginRequest,
		signal,
	});
};

export const getLoginMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof login>>,
		TError,
		{ data: LoginRequest },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof login>>,
	TError,
	{ data: LoginRequest },
	TContext
> => {
	const mutationKey = ["login"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof login>>,
		{ data: LoginRequest }
	> = (props) => {
		const { data } = props ?? {};

		return login(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<
	Awaited<ReturnType<typeof login>>
>;
export type LoginMutationBody = LoginRequest;
export type LoginMutationError = Status;

export const useLogin = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof login>>,
			TError,
			{ data: LoginRequest },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof login>>,
	TError,
	{ data: LoginRequest },
	TContext
> => {
	const mutationOptions = getLoginMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const authMe = (signal?: AbortSignal) => {
	return customClient<AuthMeResponse>({
		url: `/api/auth/me`,
		method: "GET",
		signal,
	});
};

export const getAuthMeQueryKey = () => {
	return [`/api/auth/me`] as const;
};

export const getAuthMeQueryOptions = <
	TData = Awaited<ReturnType<typeof authMe>>,
	TError = Status,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof authMe>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getAuthMeQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof authMe>>> = ({
		signal,
	}) => authMe(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof authMe>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type AuthMeQueryResult = NonNullable<Awaited<ReturnType<typeof authMe>>>;
export type AuthMeQueryError = Status;

export function useAuthMe<
	TData = Awaited<ReturnType<typeof authMe>>,
	TError = Status,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof authMe>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof authMe>>,
					TError,
					Awaited<ReturnType<typeof authMe>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useAuthMe<
	TData = Awaited<ReturnType<typeof authMe>>,
	TError = Status,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof authMe>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof authMe>>,
					TError,
					Awaited<ReturnType<typeof authMe>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useAuthMe<
	TData = Awaited<ReturnType<typeof authMe>>,
	TError = Status,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof authMe>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useAuthMe<
	TData = Awaited<ReturnType<typeof authMe>>,
	TError = Status,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof authMe>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getAuthMeQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const register = (
	registerRequest: RegisterRequest,
	signal?: AbortSignal,
) => {
	return customClient<RegisterResponse>({
		url: `/api/auth/register`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: registerRequest,
		signal,
	});
};

export const getRegisterMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof register>>,
		TError,
		{ data: RegisterRequest },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof register>>,
	TError,
	{ data: RegisterRequest },
	TContext
> => {
	const mutationKey = ["register"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof register>>,
		{ data: RegisterRequest }
	> = (props) => {
		const { data } = props ?? {};

		return register(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RegisterMutationResult = NonNullable<
	Awaited<ReturnType<typeof register>>
>;
export type RegisterMutationBody = RegisterRequest;
export type RegisterMutationError = Status;

export const useRegister = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof register>>,
			TError,
			{ data: RegisterRequest },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof register>>,
	TError,
	{ data: RegisterRequest },
	TContext
> => {
	const mutationOptions = getRegisterMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
