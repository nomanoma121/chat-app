/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * guild_type.proto
 * OpenAPI spec version: version not set
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { customClient } from "../../client";
import type {
	CreateCategoryBody,
	CreateCategoryResponse,
	DeleteCategoryResponse,
	GetCategoriesResponse,
	Status,
	UpdateCategoryBody,
	UpdateCategoryResponse,
} from "../guildTypeProto.schemas";

export const deleteCategory = (categoryId: string) => {
	return customClient<DeleteCategoryResponse>({
		url: `/api/categories/${categoryId}`,
		method: "DELETE",
	});
};

export const getDeleteCategoryMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteCategory>>,
		TError,
		{ categoryId: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteCategory>>,
	TError,
	{ categoryId: string },
	TContext
> => {
	const mutationKey = ["deleteCategory"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteCategory>>,
		{ categoryId: string }
	> = (props) => {
		const { categoryId } = props ?? {};

		return deleteCategory(categoryId);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteCategoryMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteCategory>>
>;

export type DeleteCategoryMutationError = Status;

export const useDeleteCategory = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteCategory>>,
			TError,
			{ categoryId: string },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteCategory>>,
	TError,
	{ categoryId: string },
	TContext
> => {
	const mutationOptions = getDeleteCategoryMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const updateCategory = (
	categoryId: string,
	updateCategoryBody: UpdateCategoryBody,
) => {
	return customClient<UpdateCategoryResponse>({
		url: `/api/categories/${categoryId}`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: updateCategoryBody,
	});
};

export const getUpdateCategoryMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateCategory>>,
		TError,
		{ categoryId: string; data: UpdateCategoryBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateCategory>>,
	TError,
	{ categoryId: string; data: UpdateCategoryBody },
	TContext
> => {
	const mutationKey = ["updateCategory"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateCategory>>,
		{ categoryId: string; data: UpdateCategoryBody }
	> = (props) => {
		const { categoryId, data } = props ?? {};

		return updateCategory(categoryId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateCategoryMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateCategory>>
>;
export type UpdateCategoryMutationBody = UpdateCategoryBody;
export type UpdateCategoryMutationError = Status;

export const useUpdateCategory = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateCategory>>,
			TError,
			{ categoryId: string; data: UpdateCategoryBody },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateCategory>>,
	TError,
	{ categoryId: string; data: UpdateCategoryBody },
	TContext
> => {
	const mutationOptions = getUpdateCategoryMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
export const getCategories = (guildId: string, signal?: AbortSignal) => {
	return customClient<GetCategoriesResponse>({
		url: `/api/guilds/${guildId}/categories`,
		method: "GET",
		signal,
	});
};

export const getGetCategoriesQueryKey = (guildId?: string) => {
	return [`/api/guilds/${guildId}/categories`] as const;
};

export const getGetCategoriesQueryOptions = <
	TData = Awaited<ReturnType<typeof getCategories>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetCategoriesQueryKey(guildId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategories>>> = ({
		signal,
	}) => getCategories(guildId, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!guildId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getCategories>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type GetCategoriesQueryResult = NonNullable<
	Awaited<ReturnType<typeof getCategories>>
>;
export type GetCategoriesQueryError = Status;

export function useGetCategories<
	TData = Awaited<ReturnType<typeof getCategories>>,
	TError = Status,
>(
	guildId: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCategories>>,
					TError,
					Awaited<ReturnType<typeof getCategories>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData>;
};
export function useGetCategories<
	TData = Awaited<ReturnType<typeof getCategories>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCategories>>,
					TError,
					Awaited<ReturnType<typeof getCategories>>
				>,
				"initialData"
			>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCategories<
	TData = Awaited<ReturnType<typeof getCategories>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetCategories<
	TData = Awaited<ReturnType<typeof getCategories>>,
	TError = Status,
>(
	guildId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
		>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getGetCategoriesQueryOptions(guildId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const createCategory = (
	guildId: string,
	createCategoryBody: CreateCategoryBody,
	signal?: AbortSignal,
) => {
	return customClient<CreateCategoryResponse>({
		url: `/api/guilds/${guildId}/categories`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createCategoryBody,
		signal,
	});
};

export const getCreateCategoryMutationOptions = <
	TError = Status,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createCategory>>,
		TError,
		{ guildId: string; data: CreateCategoryBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createCategory>>,
	TError,
	{ guildId: string; data: CreateCategoryBody },
	TContext
> => {
	const mutationKey = ["createCategory"];
	const { mutation: mutationOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createCategory>>,
		{ guildId: string; data: CreateCategoryBody }
	> = (props) => {
		const { guildId, data } = props ?? {};

		return createCategory(guildId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateCategoryMutationResult = NonNullable<
	Awaited<ReturnType<typeof createCategory>>
>;
export type CreateCategoryMutationBody = CreateCategoryBody;
export type CreateCategoryMutationError = Status;

export const useCreateCategory = <TError = Status, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createCategory>>,
			TError,
			{ guildId: string; data: CreateCategoryBody },
			TContext
		>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createCategory>>,
	TError,
	{ guildId: string; data: CreateCategoryBody },
	TContext
> => {
	const mutationOptions = getCreateCategoryMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
