// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: member.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addMember = `-- name: AddMember :one
INSERT INTO members (guild_id, user_id, joined_at, updated_at)
VALUES ($1, $2, $3, NOW())
RETURNING guild_id, user_id, joined_at
`

type AddMemberParams struct {
	GuildID  uuid.UUID
	UserID   uuid.UUID
	JoinedAt time.Time
}

type AddMemberRow struct {
	GuildID  uuid.UUID
	UserID   uuid.UUID
	JoinedAt time.Time
}

func (q *Queries) AddMember(ctx context.Context, arg AddMemberParams) (*AddMemberRow, error) {
	row := q.db.QueryRow(ctx, addMember, arg.GuildID, arg.UserID, arg.JoinedAt)
	var i AddMemberRow
	err := row.Scan(&i.GuildID, &i.UserID, &i.JoinedAt)
	return &i, err
}

const countByGuildID = `-- name: CountByGuildID :one
SELECT COUNT(*) AS count
FROM members
WHERE guild_id = $1
`

func (q *Queries) CountByGuildID(ctx context.Context, guildID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countByGuildID, guildID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getMembersByGuildID = `-- name: GetMembersByGuildID :many
SELECT guild_id, user_id, joined_at
FROM members
WHERE guild_id = $1
`

type GetMembersByGuildIDRow struct {
	GuildID  uuid.UUID
	UserID   uuid.UUID
	JoinedAt time.Time
}

func (q *Queries) GetMembersByGuildID(ctx context.Context, guildID uuid.UUID) ([]*GetMembersByGuildIDRow, error) {
	rows, err := q.db.Query(ctx, getMembersByGuildID, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMembersByGuildIDRow
	for rows.Next() {
		var i GetMembersByGuildIDRow
		if err := rows.Scan(&i.GuildID, &i.UserID, &i.JoinedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
