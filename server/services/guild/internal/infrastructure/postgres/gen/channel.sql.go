// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: channel.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels (id, category_id, name, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW())
RETURNING id, category_id, name, created_at
`

type CreateChannelParams struct {
	ID         uuid.UUID
	CategoryID uuid.UUID
	Name       string
	CreatedAt  time.Time
}

type CreateChannelRow struct {
	ID         uuid.UUID
	CategoryID uuid.UUID
	Name       string
	CreatedAt  time.Time
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (*CreateChannelRow, error) {
	row := q.db.QueryRow(ctx, createChannel,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.CreatedAt,
	)
	var i CreateChannelRow
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.CreatedAt,
	)
	return &i, err
}

const getByCategoryID = `-- name: GetByCategoryID :many
SELECT id, category_id, name, created_at
FROM channels
WHERE category_id = $1
`

type GetByCategoryIDRow struct {
	ID         uuid.UUID
	CategoryID uuid.UUID
	Name       string
	CreatedAt  time.Time
}

func (q *Queries) GetByCategoryID(ctx context.Context, categoryID uuid.UUID) ([]*GetByCategoryIDRow, error) {
	rows, err := q.db.Query(ctx, getByCategoryID, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetByCategoryIDRow
	for rows.Next() {
		var i GetByCategoryIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
