// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: invite.sql

package gen

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGuildInvite = `-- name: CreateGuildInvite :one
INSERT INTO invites (guild_id, creator_id, invite_code, max_uses, current_uses, expires_at, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING guild_id, creator_id, invite_code, max_uses, current_uses, expires_at, created_at
`

type CreateGuildInviteParams struct {
	GuildID     uuid.UUID
	CreatorID   uuid.UUID
	InviteCode  string
	MaxUses     *int32
	CurrentUses int32
	ExpiresAt   pgtype.Timestamp
	CreatedAt   pgtype.Timestamp
}

type CreateGuildInviteRow struct {
	GuildID     uuid.UUID
	CreatorID   uuid.UUID
	InviteCode  string
	MaxUses     *int32
	CurrentUses int32
	ExpiresAt   pgtype.Timestamp
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) CreateGuildInvite(ctx context.Context, arg CreateGuildInviteParams) (*CreateGuildInviteRow, error) {
	row := q.db.QueryRow(ctx, createGuildInvite,
		arg.GuildID,
		arg.CreatorID,
		arg.InviteCode,
		arg.MaxUses,
		arg.CurrentUses,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	var i CreateGuildInviteRow
	err := row.Scan(
		&i.GuildID,
		&i.CreatorID,
		&i.InviteCode,
		&i.MaxUses,
		&i.CurrentUses,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &i, err
}

const getGuildInvitesByGuildID = `-- name: GetGuildInvitesByGuildID :many
SELECT guild_id, creator_id, invite_code, max_uses, current_uses, expires_at, created_at
FROM invites
WHERE guild_id = $1
`

type GetGuildInvitesByGuildIDRow struct {
	GuildID     uuid.UUID
	CreatorID   uuid.UUID
	InviteCode  string
	MaxUses     *int32
	CurrentUses int32
	ExpiresAt   pgtype.Timestamp
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) GetGuildInvitesByGuildID(ctx context.Context, guildID uuid.UUID) ([]*GetGuildInvitesByGuildIDRow, error) {
	rows, err := q.db.Query(ctx, getGuildInvitesByGuildID, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetGuildInvitesByGuildIDRow
	for rows.Next() {
		var i GetGuildInvitesByGuildIDRow
		if err := rows.Scan(
			&i.GuildID,
			&i.CreatorID,
			&i.InviteCode,
			&i.MaxUses,
			&i.CurrentUses,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementInviteUses = `-- name: IncrementInviteUses :exec
UPDATE invites
SET current_uses = current_uses + 1
WHERE invite_code = $1 AND (max_uses IS NULL OR current_uses < max_uses) AND (expires_at IS NULL OR expires_at > NOW())
`

func (q *Queries) IncrementInviteUses(ctx context.Context, inviteCode string) error {
	_, err := q.db.Exec(ctx, incrementInviteUses, inviteCode)
	return err
}
