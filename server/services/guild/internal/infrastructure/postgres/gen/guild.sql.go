// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: guild.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createGuild = `-- name: CreateGuild :one
INSERT INTO guilds (id, owner_id, name, description, icon_url, default_channel_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
RETURNING id, owner_id, name, description, icon_url, default_channel_id, created_at
`

type CreateGuildParams struct {
	ID               uuid.UUID
	OwnerID          uuid.UUID
	Name             string
	Description      string
	IconUrl          string
	DefaultChannelID uuid.UUID
	CreatedAt        time.Time
}

type CreateGuildRow struct {
	ID               uuid.UUID
	OwnerID          uuid.UUID
	Name             string
	Description      string
	IconUrl          string
	DefaultChannelID uuid.UUID
	CreatedAt        time.Time
}

func (q *Queries) CreateGuild(ctx context.Context, arg CreateGuildParams) (*CreateGuildRow, error) {
	row := q.db.QueryRow(ctx, createGuild,
		arg.ID,
		arg.OwnerID,
		arg.Name,
		arg.Description,
		arg.IconUrl,
		arg.DefaultChannelID,
		arg.CreatedAt,
	)
	var i CreateGuildRow
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.IconUrl,
		&i.DefaultChannelID,
		&i.CreatedAt,
	)
	return &i, err
}

const getGuildByID = `-- name: GetGuildByID :one
SELECT id, owner_id, name, description, icon_url, default_channel_id, created_at FROM guilds WHERE id = $1
`

type GetGuildByIDRow struct {
	ID               uuid.UUID
	OwnerID          uuid.UUID
	Name             string
	Description      string
	IconUrl          string
	DefaultChannelID uuid.UUID
	CreatedAt        time.Time
}

func (q *Queries) GetGuildByID(ctx context.Context, id uuid.UUID) (*GetGuildByIDRow, error) {
	row := q.db.QueryRow(ctx, getGuildByID, id)
	var i GetGuildByIDRow
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.IconUrl,
		&i.DefaultChannelID,
		&i.CreatedAt,
	)
	return &i, err
}

const getMyGuilds = `-- name: GetMyGuilds :many
SELECT g.id, g.owner_id, g.name, g.description, g.icon_url, g.default_channel_id, g.created_at
FROM guilds g
JOIN members m ON g.id = m.guild_id
WHERE m.user_id = $1
ORDER BY g.created_at DESC
`

type GetMyGuildsRow struct {
	ID               uuid.UUID
	OwnerID          uuid.UUID
	Name             string
	Description      string
	IconUrl          string
	DefaultChannelID uuid.UUID
	CreatedAt        time.Time
}

func (q *Queries) GetMyGuilds(ctx context.Context, userID uuid.UUID) ([]*GetMyGuildsRow, error) {
	rows, err := q.db.Query(ctx, getMyGuilds, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMyGuildsRow
	for rows.Next() {
		var i GetMyGuildsRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Description,
			&i.IconUrl,
			&i.DefaultChannelID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isOwner = `-- name: IsOwner :one
SELECT EXISTS (
    SELECT 1
    FROM guilds
    WHERE id = $1 AND owner_id = $2
)
`

type IsOwnerParams struct {
	ID      uuid.UUID
	OwnerID uuid.UUID
}

func (q *Queries) IsOwner(ctx context.Context, arg IsOwnerParams) (bool, error) {
	row := q.db.QueryRow(ctx, isOwner, arg.ID, arg.OwnerID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateGuild = `-- name: UpdateGuild :one
UPDATE guilds
SET name = $2, description = $3, icon_url = $4, default_channel_id = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, owner_id, name, description, icon_url, default_channel_id, created_at
`

type UpdateGuildParams struct {
	ID               uuid.UUID
	Name             string
	Description      string
	IconUrl          string
	DefaultChannelID uuid.UUID
}

type UpdateGuildRow struct {
	ID               uuid.UUID
	OwnerID          uuid.UUID
	Name             string
	Description      string
	IconUrl          string
	DefaultChannelID uuid.UUID
	CreatedAt        time.Time
}

func (q *Queries) UpdateGuild(ctx context.Context, arg UpdateGuildParams) (*UpdateGuildRow, error) {
	row := q.db.QueryRow(ctx, updateGuild,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IconUrl,
		arg.DefaultChannelID,
	)
	var i UpdateGuildRow
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.IconUrl,
		&i.DefaultChannelID,
		&i.CreatedAt,
	)
	return &i, err
}
