// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: category.sql

package gen

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (id, guild_id, name, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW())
RETURNING id, guild_id, name, created_at
`

type CreateCategoryParams struct {
	ID        uuid.UUID
	GuildID   uuid.UUID
	Name      string
	CreatedAt pgtype.Timestamp
}

type CreateCategoryRow struct {
	ID        uuid.UUID
	GuildID   uuid.UUID
	Name      string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (*CreateCategoryRow, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.ID,
		arg.GuildID,
		arg.Name,
		arg.CreatedAt,
	)
	var i CreateCategoryRow
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.Name,
		&i.CreatedAt,
	)
	return &i, err
}

const getByGuildID = `-- name: GetByGuildID :many
SELECT id, guild_id, name, created_at
FROM categories
WHERE guild_id = $1
`

type GetByGuildIDRow struct {
	ID        uuid.UUID
	GuildID   uuid.UUID
	Name      string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetByGuildID(ctx context.Context, guildID uuid.UUID) ([]*GetByGuildIDRow, error) {
	rows, err := q.db.Query(ctx, getByGuildID, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetByGuildIDRow
	for rows.Next() {
		var i GetByGuildIDRow
		if err := rows.Scan(
			&i.ID,
			&i.GuildID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
