// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: message.sql

package gen

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (id, channel_id, sender_id, content, reply_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, NOW())
RETURNING id, channel_id, sender_id, content, reply_id, created_at
`

type CreateMessageParams struct {
	ID        uuid.UUID
	ChannelID uuid.UUID
	SenderID  uuid.UUID
	Content   string
	ReplyID   pgtype.UUID
	CreatedAt pgtype.Timestamp
}

type CreateMessageRow struct {
	ID        uuid.UUID
	ChannelID uuid.UUID
	SenderID  uuid.UUID
	Content   string
	ReplyID   pgtype.UUID
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (*CreateMessageRow, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.ID,
		arg.ChannelID,
		arg.SenderID,
		arg.Content,
		arg.ReplyID,
		arg.CreatedAt,
	)
	var i CreateMessageRow
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.SenderID,
		&i.Content,
		&i.ReplyID,
		&i.CreatedAt,
	)
	return &i, err
}

const getMessagesByChannelID = `-- name: GetMessagesByChannelID :many
SELECT id, channel_id, sender_id, content, reply_id, created_at
FROM messages
WHERE channel_id = $1
ORDER BY created_at DESC
`

type GetMessagesByChannelIDRow struct {
	ID        uuid.UUID
	ChannelID uuid.UUID
	SenderID  uuid.UUID
	Content   string
	ReplyID   pgtype.UUID
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetMessagesByChannelID(ctx context.Context, channelID uuid.UUID) ([]*GetMessagesByChannelIDRow, error) {
	rows, err := q.db.Query(ctx, getMessagesByChannelID, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMessagesByChannelIDRow
	for rows.Next() {
		var i GetMessagesByChannelIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ChannelID,
			&i.SenderID,
			&i.Content,
			&i.ReplyID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
