// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package gen

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, display_id, username, email, password_hash, bio, icon_url, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW())
RETURNING id, display_id, username, email, bio, icon_url, created_at
`

type CreateUserParams struct {
	ID           uuid.UUID
	DisplayID    string
	Username     string
	Email        string
	PasswordHash string
	Bio          string
	IconUrl      string
	CreatedAt    pgtype.Timestamp
}

type CreateUserRow struct {
	ID        uuid.UUID
	DisplayID string
	Username  string
	Email     string
	Bio       string
	IconUrl   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.DisplayID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.Bio,
		arg.IconUrl,
		arg.CreatedAt,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.DisplayID,
		&i.Username,
		&i.Email,
		&i.Bio,
		&i.IconUrl,
		&i.CreatedAt,
	)
	return &i, err
}

const existsByDisplayId = `-- name: ExistsByDisplayId :one
SELECT COUNT(*) FROM users WHERE display_id = $1
`

func (q *Queries) ExistsByDisplayId(ctx context.Context, displayID string) (int64, error) {
	row := q.db.QueryRow(ctx, existsByDisplayId, displayID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const existsByEmail = `-- name: ExistsByEmail :one
SELECT COUNT(*) FROM users WHERE email = $1
`

func (q *Queries) ExistsByEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, existsByEmail, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPasswordByEmail = `-- name: GetPasswordByEmail :one
SELECT id, password_hash FROM users WHERE email = $1
`

type GetPasswordByEmailRow struct {
	ID           uuid.UUID
	PasswordHash string
}

func (q *Queries) GetPasswordByEmail(ctx context.Context, email string) (*GetPasswordByEmailRow, error) {
	row := q.db.QueryRow(ctx, getPasswordByEmail, email)
	var i GetPasswordByEmailRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, display_id, username, email, bio, icon_url, created_at FROM users WHERE id = $1
`

type GetUserByIDRow struct {
	ID        uuid.UUID
	DisplayID string
	Username  string
	Email     string
	Bio       string
	IconUrl   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (*GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.DisplayID,
		&i.Username,
		&i.Email,
		&i.Bio,
		&i.IconUrl,
		&i.CreatedAt,
	)
	return &i, err
}

const getUsersByIDs = `-- name: GetUsersByIDs :many
SELECT id, display_id, username, email, bio, icon_url, created_at FROM users WHERE id = ANY($1::uuid[])
`

type GetUsersByIDsRow struct {
	ID        uuid.UUID
	DisplayID string
	Username  string
	Email     string
	Bio       string
	IconUrl   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetUsersByIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]*GetUsersByIDsRow, error) {
	rows, err := q.db.Query(ctx, getUsersByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetUsersByIDsRow
	for rows.Next() {
		var i GetUsersByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.DisplayID,
			&i.Username,
			&i.Email,
			&i.Bio,
			&i.IconUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET display_id = $2, username = $3, bio = $4, icon_url = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, display_id, username, email, bio, icon_url, created_at
`

type UpdateUserParams struct {
	ID        uuid.UUID
	DisplayID string
	Username  string
	Bio       string
	IconUrl   string
}

type UpdateUserRow struct {
	ID        uuid.UUID
	DisplayID string
	Username  string
	Email     string
	Bio       string
	IconUrl   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.DisplayID,
		arg.Username,
		arg.Bio,
		arg.IconUrl,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.DisplayID,
		&i.Username,
		&i.Email,
		&i.Bio,
		&i.IconUrl,
		&i.CreatedAt,
	)
	return &i, err
}
