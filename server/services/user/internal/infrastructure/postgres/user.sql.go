// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package postgres

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (display_id, username, email, password_hash, bio, icon_url, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
RETURNING id, display_id, username, email, password_hash, bio, icon_url, created_at, updated_at
`

type CreateUserParams struct {
	DisplayID    string
	Username     string
	Email        string
	PasswordHash string
	Bio          sql.NullString
	IconUrl      sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.DisplayID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.Bio,
		arg.IconUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByDisplayID = `-- name: GetUserByDisplayID :one
SELECT id, display_id, username, email, password_hash, bio, icon_url, created_at, updated_at FROM users WHERE display_id = $1
`

func (q *Queries) GetUserByDisplayID(ctx context.Context, displayID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByDisplayID, displayID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, display_id, username, email, password_hash, bio, icon_url, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, display_id, username, email, password_hash, bio, icon_url, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, display_id, username, email, password_hash, bio, icon_url, created_at, updated_at FROM users 
ORDER BY created_at DESC 
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.DisplayID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.Bio,
			&i.IconUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET username = $2, bio = $3, icon_url = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, display_id, username, email, password_hash, bio, icon_url, created_at, updated_at
`

type UpdateUserParams struct {
	ID       uuid.UUID
	Username string
	Bio      sql.NullString
	IconUrl  sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Bio,
		arg.IconUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
