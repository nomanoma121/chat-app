// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package generated

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (display_id, username, email, password_hash, bio, icon_url, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
RETURNING (id, created_at)
`

type CreateUserParams struct {
	DisplayID    string
	Username     string
	Email        string
	PasswordHash string
	Bio          sql.NullString
	IconUrl      sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.DisplayID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.Bio,
		arg.IconUrl,
	)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const existsByDisplayId = `-- name: ExistsByDisplayId :one
SELECT id, display_id, username, email, password_hash, bio, icon_url, created_at, updated_at FROM users WHERE display_id = $1
`

func (q *Queries) ExistsByDisplayId(ctx context.Context, displayID string) (User, error) {
	row := q.db.QueryRowContext(ctx, existsByDisplayId, displayID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, display_id, username, email, password_hash, bio, icon_url, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET username = $2, bio = $3, icon_url = $4, updated_at = NOW()
WHERE id = $1
RETURNING (id, updated_at)
`

type UpdateUserParams struct {
	ID       uuid.UUID
	Username string
	Bio      sql.NullString
	IconUrl  sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Bio,
		arg.IconUrl,
	)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}
