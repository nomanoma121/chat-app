// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package generated

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (display_id, username, email, password_hash, bio, icon_url, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
RETURNING id, display_id, username, email, password_hash, bio, icon_url, created_at, updated_at
`

type CreateUserParams struct {
	DisplayID    string
	Username     string
	Email        string
	PasswordHash string
	Bio          string
	IconUrl      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.DisplayID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.Bio,
		arg.IconUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const existsByDisplayId = `-- name: ExistsByDisplayId :one
SELECT COUNT(*) FROM users WHERE display_id = $1
`

func (q *Queries) ExistsByDisplayId(ctx context.Context, displayID string) (int64, error) {
	row := q.db.QueryRow(ctx, existsByDisplayId, displayID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const existsByEmail = `-- name: ExistsByEmail :one
SELECT COUNT(*) FROM users WHERE email = $1
`

func (q *Queries) ExistsByEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, existsByEmail, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, display_id, username, email, password_hash, bio, icon_url, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET username = $2, bio = $3, icon_url = $4, updated_at = NOW()
WHERE id = $1
RETURNING (id, updated_at)
`

type UpdateUserParams struct {
	ID       uuid.UUID
	Username string
	Bio      string
	IconUrl  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Bio,
		arg.IconUrl,
	)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}
