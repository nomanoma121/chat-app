// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: guild_service.proto

package guildpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GuildService_CreateGuild_FullMethodName       = "/guild.GuildService/CreateGuild"
	GuildService_GetGuildOverview_FullMethodName  = "/guild.GuildService/GetGuildOverview"
	GuildService_GetGuildByID_FullMethodName      = "/guild.GuildService/GetGuildByID"
	GuildService_ListMyGuilds_FullMethodName      = "/guild.GuildService/ListMyGuilds"
	GuildService_UpdateGuild_FullMethodName       = "/guild.GuildService/UpdateGuild"
	GuildService_DeleteGuildMember_FullMethodName = "/guild.GuildService/DeleteGuildMember"
	GuildService_LeaveGuild_FullMethodName        = "/guild.GuildService/LeaveGuild"
	GuildService_GetGuildInvites_FullMethodName   = "/guild.GuildService/GetGuildInvites"
	GuildService_CreateGuildInvite_FullMethodName = "/guild.GuildService/CreateGuildInvite"
	GuildService_DeleteGuildInvite_FullMethodName = "/guild.GuildService/DeleteGuildInvite"
	GuildService_JoinGuild_FullMethodName         = "/guild.GuildService/JoinGuild"
	GuildService_CreateCategory_FullMethodName    = "/guild.GuildService/CreateCategory"
	GuildService_UpdateCategory_FullMethodName    = "/guild.GuildService/UpdateCategory"
	GuildService_DeleteCategory_FullMethodName    = "/guild.GuildService/DeleteCategory"
	GuildService_CreateChannel_FullMethodName     = "/guild.GuildService/CreateChannel"
	GuildService_UpdateChannel_FullMethodName     = "/guild.GuildService/UpdateChannel"
	GuildService_DeleteChannel_FullMethodName     = "/guild.GuildService/DeleteChannel"
)

// GuildServiceClient is the client API for GuildService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuildServiceClient interface {
	CreateGuild(ctx context.Context, in *CreateGuildRequest, opts ...grpc.CallOption) (*CreateGuildResponse, error)
	GetGuildOverview(ctx context.Context, in *GetGuildOverviewRequest, opts ...grpc.CallOption) (*GetGuildOverviewResponse, error)
	GetGuildByID(ctx context.Context, in *GetGuildByIDRequest, opts ...grpc.CallOption) (*GetGuildByIDResponse, error)
	ListMyGuilds(ctx context.Context, in *ListMyGuildsRequest, opts ...grpc.CallOption) (*ListMyGuildsResponse, error)
	UpdateGuild(ctx context.Context, in *UpdateGuildRequest, opts ...grpc.CallOption) (*UpdateGuildResponse, error)
	DeleteGuildMember(ctx context.Context, in *DeleteGuildMemberRequest, opts ...grpc.CallOption) (*DeleteGuildMemberResponse, error)
	LeaveGuild(ctx context.Context, in *LeaveGuildRequest, opts ...grpc.CallOption) (*LeaveGuildResponse, error)
	GetGuildInvites(ctx context.Context, in *GetGuildInvitesRequest, opts ...grpc.CallOption) (*GetGuildInvitesResponse, error)
	CreateGuildInvite(ctx context.Context, in *CreateGuildInviteRequest, opts ...grpc.CallOption) (*CreateGuildInviteResponse, error)
	DeleteGuildInvite(ctx context.Context, in *DeleteGuildInviteRequest, opts ...grpc.CallOption) (*DeleteGuildInviteResponse, error)
	JoinGuild(ctx context.Context, in *JoinGuildRequest, opts ...grpc.CallOption) (*JoinGuildResponse, error)
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error)
	UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*UpdateChannelResponse, error)
	DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error)
}

type guildServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGuildServiceClient(cc grpc.ClientConnInterface) GuildServiceClient {
	return &guildServiceClient{cc}
}

func (c *guildServiceClient) CreateGuild(ctx context.Context, in *CreateGuildRequest, opts ...grpc.CallOption) (*CreateGuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGuildResponse)
	err := c.cc.Invoke(ctx, GuildService_CreateGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) GetGuildOverview(ctx context.Context, in *GetGuildOverviewRequest, opts ...grpc.CallOption) (*GetGuildOverviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGuildOverviewResponse)
	err := c.cc.Invoke(ctx, GuildService_GetGuildOverview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) GetGuildByID(ctx context.Context, in *GetGuildByIDRequest, opts ...grpc.CallOption) (*GetGuildByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGuildByIDResponse)
	err := c.cc.Invoke(ctx, GuildService_GetGuildByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) ListMyGuilds(ctx context.Context, in *ListMyGuildsRequest, opts ...grpc.CallOption) (*ListMyGuildsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMyGuildsResponse)
	err := c.cc.Invoke(ctx, GuildService_ListMyGuilds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) UpdateGuild(ctx context.Context, in *UpdateGuildRequest, opts ...grpc.CallOption) (*UpdateGuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGuildResponse)
	err := c.cc.Invoke(ctx, GuildService_UpdateGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) DeleteGuildMember(ctx context.Context, in *DeleteGuildMemberRequest, opts ...grpc.CallOption) (*DeleteGuildMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGuildMemberResponse)
	err := c.cc.Invoke(ctx, GuildService_DeleteGuildMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) LeaveGuild(ctx context.Context, in *LeaveGuildRequest, opts ...grpc.CallOption) (*LeaveGuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveGuildResponse)
	err := c.cc.Invoke(ctx, GuildService_LeaveGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) GetGuildInvites(ctx context.Context, in *GetGuildInvitesRequest, opts ...grpc.CallOption) (*GetGuildInvitesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGuildInvitesResponse)
	err := c.cc.Invoke(ctx, GuildService_GetGuildInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) CreateGuildInvite(ctx context.Context, in *CreateGuildInviteRequest, opts ...grpc.CallOption) (*CreateGuildInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGuildInviteResponse)
	err := c.cc.Invoke(ctx, GuildService_CreateGuildInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) DeleteGuildInvite(ctx context.Context, in *DeleteGuildInviteRequest, opts ...grpc.CallOption) (*DeleteGuildInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGuildInviteResponse)
	err := c.cc.Invoke(ctx, GuildService_DeleteGuildInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) JoinGuild(ctx context.Context, in *JoinGuildRequest, opts ...grpc.CallOption) (*JoinGuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinGuildResponse)
	err := c.cc.Invoke(ctx, GuildService_JoinGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, GuildService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, GuildService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, GuildService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChannelResponse)
	err := c.cc.Invoke(ctx, GuildService_CreateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*UpdateChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChannelResponse)
	err := c.cc.Invoke(ctx, GuildService_UpdateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChannelResponse)
	err := c.cc.Invoke(ctx, GuildService_DeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuildServiceServer is the server API for GuildService service.
// All implementations must embed UnimplementedGuildServiceServer
// for forward compatibility.
type GuildServiceServer interface {
	CreateGuild(context.Context, *CreateGuildRequest) (*CreateGuildResponse, error)
	GetGuildOverview(context.Context, *GetGuildOverviewRequest) (*GetGuildOverviewResponse, error)
	GetGuildByID(context.Context, *GetGuildByIDRequest) (*GetGuildByIDResponse, error)
	ListMyGuilds(context.Context, *ListMyGuildsRequest) (*ListMyGuildsResponse, error)
	UpdateGuild(context.Context, *UpdateGuildRequest) (*UpdateGuildResponse, error)
	DeleteGuildMember(context.Context, *DeleteGuildMemberRequest) (*DeleteGuildMemberResponse, error)
	LeaveGuild(context.Context, *LeaveGuildRequest) (*LeaveGuildResponse, error)
	GetGuildInvites(context.Context, *GetGuildInvitesRequest) (*GetGuildInvitesResponse, error)
	CreateGuildInvite(context.Context, *CreateGuildInviteRequest) (*CreateGuildInviteResponse, error)
	DeleteGuildInvite(context.Context, *DeleteGuildInviteRequest) (*DeleteGuildInviteResponse, error)
	JoinGuild(context.Context, *JoinGuildRequest) (*JoinGuildResponse, error)
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error)
	CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error)
	UpdateChannel(context.Context, *UpdateChannelRequest) (*UpdateChannelResponse, error)
	DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error)
	mustEmbedUnimplementedGuildServiceServer()
}

// UnimplementedGuildServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGuildServiceServer struct{}

func (UnimplementedGuildServiceServer) CreateGuild(context.Context, *CreateGuildRequest) (*CreateGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuild not implemented")
}
func (UnimplementedGuildServiceServer) GetGuildOverview(context.Context, *GetGuildOverviewRequest) (*GetGuildOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildOverview not implemented")
}
func (UnimplementedGuildServiceServer) GetGuildByID(context.Context, *GetGuildByIDRequest) (*GetGuildByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildByID not implemented")
}
func (UnimplementedGuildServiceServer) ListMyGuilds(context.Context, *ListMyGuildsRequest) (*ListMyGuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyGuilds not implemented")
}
func (UnimplementedGuildServiceServer) UpdateGuild(context.Context, *UpdateGuildRequest) (*UpdateGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuild not implemented")
}
func (UnimplementedGuildServiceServer) DeleteGuildMember(context.Context, *DeleteGuildMemberRequest) (*DeleteGuildMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuildMember not implemented")
}
func (UnimplementedGuildServiceServer) LeaveGuild(context.Context, *LeaveGuildRequest) (*LeaveGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGuild not implemented")
}
func (UnimplementedGuildServiceServer) GetGuildInvites(context.Context, *GetGuildInvitesRequest) (*GetGuildInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildInvites not implemented")
}
func (UnimplementedGuildServiceServer) CreateGuildInvite(context.Context, *CreateGuildInviteRequest) (*CreateGuildInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuildInvite not implemented")
}
func (UnimplementedGuildServiceServer) DeleteGuildInvite(context.Context, *DeleteGuildInviteRequest) (*DeleteGuildInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuildInvite not implemented")
}
func (UnimplementedGuildServiceServer) JoinGuild(context.Context, *JoinGuildRequest) (*JoinGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGuild not implemented")
}
func (UnimplementedGuildServiceServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedGuildServiceServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedGuildServiceServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedGuildServiceServer) CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedGuildServiceServer) UpdateChannel(context.Context, *UpdateChannelRequest) (*UpdateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedGuildServiceServer) DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedGuildServiceServer) mustEmbedUnimplementedGuildServiceServer() {}
func (UnimplementedGuildServiceServer) testEmbeddedByValue()                      {}

// UnsafeGuildServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuildServiceServer will
// result in compilation errors.
type UnsafeGuildServiceServer interface {
	mustEmbedUnimplementedGuildServiceServer()
}

func RegisterGuildServiceServer(s grpc.ServiceRegistrar, srv GuildServiceServer) {
	// If the following call pancis, it indicates UnimplementedGuildServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GuildService_ServiceDesc, srv)
}

func _GuildService_CreateGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).CreateGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_CreateGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).CreateGuild(ctx, req.(*CreateGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_GetGuildOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).GetGuildOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_GetGuildOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).GetGuildOverview(ctx, req.(*GetGuildOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_GetGuildByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).GetGuildByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_GetGuildByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).GetGuildByID(ctx, req.(*GetGuildByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_ListMyGuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyGuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).ListMyGuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_ListMyGuilds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).ListMyGuilds(ctx, req.(*ListMyGuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_UpdateGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).UpdateGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_UpdateGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).UpdateGuild(ctx, req.(*UpdateGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_DeleteGuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGuildMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).DeleteGuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_DeleteGuildMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).DeleteGuildMember(ctx, req.(*DeleteGuildMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_LeaveGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).LeaveGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_LeaveGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).LeaveGuild(ctx, req.(*LeaveGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_GetGuildInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).GetGuildInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_GetGuildInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).GetGuildInvites(ctx, req.(*GetGuildInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_CreateGuildInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuildInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).CreateGuildInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_CreateGuildInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).CreateGuildInvite(ctx, req.(*CreateGuildInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_DeleteGuildInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGuildInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).DeleteGuildInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_DeleteGuildInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).DeleteGuildInvite(ctx, req.(*DeleteGuildInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_JoinGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).JoinGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_JoinGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).JoinGuild(ctx, req.(*JoinGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_UpdateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).UpdateChannel(ctx, req.(*UpdateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).DeleteChannel(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GuildService_ServiceDesc is the grpc.ServiceDesc for GuildService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuildService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guild.GuildService",
	HandlerType: (*GuildServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGuild",
			Handler:    _GuildService_CreateGuild_Handler,
		},
		{
			MethodName: "GetGuildOverview",
			Handler:    _GuildService_GetGuildOverview_Handler,
		},
		{
			MethodName: "GetGuildByID",
			Handler:    _GuildService_GetGuildByID_Handler,
		},
		{
			MethodName: "ListMyGuilds",
			Handler:    _GuildService_ListMyGuilds_Handler,
		},
		{
			MethodName: "UpdateGuild",
			Handler:    _GuildService_UpdateGuild_Handler,
		},
		{
			MethodName: "DeleteGuildMember",
			Handler:    _GuildService_DeleteGuildMember_Handler,
		},
		{
			MethodName: "LeaveGuild",
			Handler:    _GuildService_LeaveGuild_Handler,
		},
		{
			MethodName: "GetGuildInvites",
			Handler:    _GuildService_GetGuildInvites_Handler,
		},
		{
			MethodName: "CreateGuildInvite",
			Handler:    _GuildService_CreateGuildInvite_Handler,
		},
		{
			MethodName: "DeleteGuildInvite",
			Handler:    _GuildService_DeleteGuildInvite_Handler,
		},
		{
			MethodName: "JoinGuild",
			Handler:    _GuildService_JoinGuild_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _GuildService_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _GuildService_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _GuildService_DeleteCategory_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _GuildService_CreateChannel_Handler,
		},
		{
			MethodName: "UpdateChannel",
			Handler:    _GuildService_UpdateChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _GuildService_DeleteChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guild_service.proto",
}
