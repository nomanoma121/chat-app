// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: message_service.proto

package messagepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageService_CreateMessage_FullMethodName            = "/msg.MessageService/CreateMessage"
	MessageService_GetMessagesByChannelID_FullMethodName   = "/msg.MessageService/GetMessagesByChannelID"
	MessageService_UpdateMessageByMessageID_FullMethodName = "/msg.MessageService/UpdateMessageByMessageID"
	MessageService_DeleteMessageByMessageID_FullMethodName = "/msg.MessageService/DeleteMessageByMessageID"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error)
	GetMessagesByChannelID(ctx context.Context, in *GetMessagesByChannelIDRequest, opts ...grpc.CallOption) (*GetMessagesByChannelIDResponse, error)
	UpdateMessageByMessageID(ctx context.Context, in *UpdateMessageByMessageIDRequest, opts ...grpc.CallOption) (*UpdateMessageByMessageIDResponse, error)
	DeleteMessageByMessageID(ctx context.Context, in *DeleteMessageByMessageIDRequest, opts ...grpc.CallOption) (*DeleteMessageByMessageIDResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_CreateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessagesByChannelID(ctx context.Context, in *GetMessagesByChannelIDRequest, opts ...grpc.CallOption) (*GetMessagesByChannelIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessagesByChannelIDResponse)
	err := c.cc.Invoke(ctx, MessageService_GetMessagesByChannelID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateMessageByMessageID(ctx context.Context, in *UpdateMessageByMessageIDRequest, opts ...grpc.CallOption) (*UpdateMessageByMessageIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMessageByMessageIDResponse)
	err := c.cc.Invoke(ctx, MessageService_UpdateMessageByMessageID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) DeleteMessageByMessageID(ctx context.Context, in *DeleteMessageByMessageIDRequest, opts ...grpc.CallOption) (*DeleteMessageByMessageIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMessageByMessageIDResponse)
	err := c.cc.Invoke(ctx, MessageService_DeleteMessageByMessageID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility.
type MessageServiceServer interface {
	CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error)
	GetMessagesByChannelID(context.Context, *GetMessagesByChannelIDRequest) (*GetMessagesByChannelIDResponse, error)
	UpdateMessageByMessageID(context.Context, *UpdateMessageByMessageIDRequest) (*UpdateMessageByMessageIDResponse, error)
	DeleteMessageByMessageID(context.Context, *DeleteMessageByMessageIDRequest) (*DeleteMessageByMessageIDResponse, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageServiceServer struct{}

func (UnimplementedMessageServiceServer) CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedMessageServiceServer) GetMessagesByChannelID(context.Context, *GetMessagesByChannelIDRequest) (*GetMessagesByChannelIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesByChannelID not implemented")
}
func (UnimplementedMessageServiceServer) UpdateMessageByMessageID(context.Context, *UpdateMessageByMessageIDRequest) (*UpdateMessageByMessageIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessageByMessageID not implemented")
}
func (UnimplementedMessageServiceServer) DeleteMessageByMessageID(context.Context, *DeleteMessageByMessageIDRequest) (*DeleteMessageByMessageIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessageByMessageID not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}
func (UnimplementedMessageServiceServer) testEmbeddedByValue()                        {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	// If the following call pancis, it indicates UnimplementedMessageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessagesByChannelID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesByChannelIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessagesByChannelID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetMessagesByChannelID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessagesByChannelID(ctx, req.(*GetMessagesByChannelIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateMessageByMessageID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageByMessageIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateMessageByMessageID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_UpdateMessageByMessageID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateMessageByMessageID(ctx, req.(*UpdateMessageByMessageIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_DeleteMessageByMessageID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageByMessageIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).DeleteMessageByMessageID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_DeleteMessageByMessageID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).DeleteMessageByMessageID(ctx, req.(*DeleteMessageByMessageIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msg.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _MessageService_CreateMessage_Handler,
		},
		{
			MethodName: "GetMessagesByChannelID",
			Handler:    _MessageService_GetMessagesByChannelID_Handler,
		},
		{
			MethodName: "UpdateMessageByMessageID",
			Handler:    _MessageService_UpdateMessageByMessageID_Handler,
		},
		{
			MethodName: "DeleteMessageByMessageID",
			Handler:    _MessageService_DeleteMessageByMessageID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message_service.proto",
}
