syntax = "proto3";

package user;

option go_package = "./user;userpb";

import "protoc-gen-openapiv2/options/annotations.proto";
import "user_type.proto";

message RegisterRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["display_id", "password", "email", "name", "bio", "icon_url"]
    };
  };
  string display_id = 1;
  string password = 2;
  string email = 3;
  string name = 4;
  string bio = 5;
  string icon_url = 6;
}

message RegisterResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["user"]
    };
  };
  User user = 1;
}

message LoginRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["email", "password"]
    };
  };
  string email = 1;
  string password = 2;
}

message LoginResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["token"]
    };
  };
  string token = 1;
}

message AuthMeRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: []
    };
  };
}

message AuthMeResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["user_id", "exp", "iat"]
    };
  };
  string user_id = 1;
  string exp = 2;
  string iat = 3;
}

message GetCurrentUserRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: []
    };
  };
}

message GetCurrentUserResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["user"]
    };
  };
  User user = 1;
}

message GetUserByIDRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    };
  };
  string id = 1;
}

message GetUserByIDResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["user"]
    };
  };
  User user = 1;
}

message UpdateRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["display_id", "name", "bio", "icon_url"]
    };
  };
  string display_id = 1;
  string name = 2;
  string bio = 3;
  string icon_url = 4;
}

message UpdateResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["user"]
    };
  };
  User user = 1;
}

message ExistsRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["user_id"]
    };
  };
  string user_id = 1;
}

message ExistsResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["exists"]
    };
  };
  bool exists = 1;
}
