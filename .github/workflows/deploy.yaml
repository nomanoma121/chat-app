name: Deploy to Production
on:
  workflow_dispatch:
  # push:
  #   branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  ORG: nomanoma121
  APP: chat-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set tags
        id: meta
        run: |
          SHA_TAG=${GITHUB_SHA::12}
          echo "SHA_TAG=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "FRONT_IMG=${REGISTRY}/${ORG}/${APP}-frontend" >> $GITHUB_OUTPUT
          echo "USER_IMG=${REGISTRY}/${ORG}/${APP}-user" >> $GITHUB_OUTPUT
          echo "GUILD_IMG=${REGISTRY}/${ORG}/${APP}-guild" >> $GITHUB_OUTPUT
          echo "MESSAGE_IMG=${REGISTRY}/${ORG}/${APP}-message" >> $GITHUB_OUTPUT
          echo "REALTIME_IMG=${REGISTRY}/${ORG}/${APP}-realtime" >> $GITHUB_OUTPUT
          echo "API_IMG=${REGISTRY}/${ORG}/${APP}-api-gateway" >> $GITHUB_OUTPUT

      - name: Buildx setup
        uses: docker/setup-buildx-action@v3

      - name: Build & Push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: |
            ${{ steps.meta.outputs.FRONT_IMG }}:latest
            ${{ steps.meta.outputs.FRONT_IMG }}:${{ steps.meta.outputs.SHA_TAG }}

      - name: Build & Push user service
        uses: docker/build-push-action@v6
        with:
          context: ./server/services/user
          push: true
          tags: |
            ${{ steps.meta.outputs.USER_IMG }}:latest
            ${{ steps.meta.outputs.USER_IMG }}:${{ steps.meta.outputs.SHA_TAG }}

      - name: Build & Push guild service
        uses: docker/build-push-action@v6
        with:
          context: ./server/services/guild
          push: true
          tags: |
            ${{ steps.meta.outputs.GUILD_IMG }}:latest
            ${{ steps.meta.outputs.GUILD_IMG }}:${{ steps.meta.outputs.SHA_TAG }}

      - name: Build & Push message service
        uses: docker/build-push-action@v6
        with:
          context: ./server/services/message
          push: true
          tags: |
            ${{ steps.meta.outputs.MESSAGE_IMG }}:latest
            ${{ steps.meta.outputs.MESSAGE_IMG }}:${{ steps.meta.outputs.SHA_TAG }}

      - name: Build & Push realtime service
        uses: docker/build-push-action@v6
        with:
          context: ./server/services/realtime
          push: true
          tags: |
            ${{ steps.meta.outputs.REALTIME_IMG }}:latest
            ${{ steps.meta.outputs.REALTIME_IMG }}:${{ steps.meta.outputs.SHA_TAG }}

      - name: Build & Push api-gateway service
        uses: docker/build-push-action@v6
        with:
          context: ./server/services/api-gateway
          push: true
          tags: |
            ${{ steps.meta.outputs.API_IMG }}:latest
            ${{ steps.meta.outputs.API_IMG }}:${{ steps.meta.outputs.SHA_TAG }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install cloudflared
        run: |
          lastest_version=$(curl -s $GITHUB_API_URL/repos/cloudflare/cloudflared/releases/latest | jq -r '.tag_name')
          mkdir -p /tmp/cloudflared
          curl -sL -o /tmp/cloudflared/cloudflared $GITHUB_SERVER_URL/cloudflare/cloudflared/releases/download/$latest_version/cloudflared-linux-amd64
          chmod +x /tmp/cloudflared/cloudflared
          /tmp/cloudflared/cloudflared --version

      - name: Start Cloudflare Tunnel
        env:
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
          TUNNELS_HOST: ${{ secrets.SSH_HOST }}
        run: |
          /tmp/cloudflared/cloudflared access tcp --hostname $TUNNELS_HOST --url localhost:22 --listen-port 2222 & sleep 3

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: localhost # cloudflared経由で接続するためlocalhost
          port: 2222
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "Pulling latest images..."
            export VERSION=${GITHUB_SHA::12}
            docker compose -f ~/chat-app/docker-compose.prod.yml pull
            docker compose -f ~/chat-app/docker-compose.prod.yml up -d
            echo "Cleaning up unused images..."
            docker image prune -f
            echo "Deployment completed."
